name: Build Monerod Container Image

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths:
      - 'monerod-container/**'
      - '.github/workflows/monerod-container.yml'

jobs:
  build:
    runs-on: ubuntu-latest 
    defaults:
      run:
        shell: bash
        working-directory: monerod-container
    steps:
      - name: "Retrieve Latest Monero Release Tag"
        id: monero
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: monero-project
          repo: monero
          excludes: prelease, draft
      - uses: actions/checkout@v2
      - name: "Retrieve Monero Hashes File"
        run: |
          curl -s https://www.getmonero.org/downloads/hashes.txt -o "$HASHES_FILE"
        env:
          HASHES_FILE: "hashes.${{ steps.monero.outputs.release }}.txt"
      - name: "Import binaryfate's GPG"
        run: |
          curl -s "$GPG_URL" | gpg --import
        env:
          GPG_URL: "https://raw.githubusercontent.com/monero-project/monero/${{ steps.monero.outputs.release }}/utils/gpg_keys/binaryfate.asc"
      - name: "Verify GPG Signature of Hashes File"
        run: |
          gpg --verify "$HASHES_FILE"
        env:
          HASHES_FILE: "hashes.${{ steps.monero.outputs.release }}.txt"
      - name: "Retrieve Monero Release Archive"
        run: |
          curl -s "$ARCHIVE_URL" -o "$ARCHIVE_FILENAME"
        env:
          ARCHIVE_URL: "https://downloads.getmonero.org/cli/monero-linux-x64-${{ steps.monero.outputs.release }}.tar.bz2"
          ARCHIVE_FILENAME: "monero-linux-x64-${{ steps.monero.outputs.release }}.tar.bz2"
      - name: "Verify Monero Release Archive Hash"
        run: |
          grep -q "$(sha256sum "$ARCHIVE_FILENAME" | cut -c 1-64)" "$HASHES_FILE"
        env:
          ARCHIVE_FILENAME: "monero-linux-x64-${{ steps.monero.outputs.release }}.tar.bz2"
          HASHES_FILE: "hashes.${{ steps.monero.outputs.release }}.txt"
      - name: "Extract Monero Release Archive"
        run: |
          mkdir monerod
          tar -jxf "$ARCHIVE_FILENAME" -C monerod/ --strip-components=1
        env:
          ARCHIVE_FILENAME: "monero-linux-x64-${{ steps.monero.outputs.release }}.tar.bz2"
      - name: Get Timestamp
        id: timestampz
        run: echo "::set-output timestampz=$(TZ='UTC' date +'%Y-%m-%dT%H:%M:%SZ')"
      - name: Set Container Metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/mkell43/monerod
          tags: |
            type=raw,value=${{ steps.monero.outputs.release }}
            type=raw,value=${{ steps.timestampz.outputs.timestampz }}
          labels: |
            org.opencontainers.image.created ${{ steps.timestampz.outputs.timestampz }}
            org.opencontainers.image.version ${{ steps.monero.outputs.release }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: "Authenticate Docker to Github Package Repository"
        uses: docker/login-action@v1.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CONTAINER_REGISTRY_PAT }}
      - name: "Build & Push Container Image"
        uses: docker/build-push-action@v2.7.0
        with:
          context: ./monerod-container
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/mkell43/monerod:buildcache
          cache-to: type=registry,ref=ghcr.io/mkell43/monerod:buildcache,mode=max
      - name: "Dump Cosign Key To File"
        run: |
          echo "$COSIGN_KEY" > /tmp/cosign.key
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      - name: "Install Cosign"
        uses: sigstore/cosign-installer@v1.2.0
      - name: "Sign The Image"
        run: |
          echo -n "${{ secrets.COSIGN_PASS }}" | \
            cosign sign --key /tmp/cosign.key ghcr.io/mkell43/monerod:${{ steps.monero.outputs.release }}
