name: Build P2pool Container Image

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths:
      - 'p2pool-container/**'
      - '!p2pool-container/README.md'
      - '.github/workflows/p2pool-container.yml'

jobs:
  retrieve-release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: p2pool-container
    outputs:
      p2pool_release: ${{ steps.p2pool.outputs.release }}
    steps:
      - uses: actions/checkout@v2
      - name: "Retrieve Latest P2pool Release Tag"
        id: p2pool
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: SChernykh
          repo: p2pool
          excludes: prelease, draft
      - name: "Retrieve P2pool Hashes File"
        run: |
          curl -sLO "https://github.com/SChernykh/p2pool/releases/download/$P2POOL_TAG/sha256sums.txt.asc"
        env:
          P2POOL_TAG: "${{ steps.p2pool.outputs.release }}"
      - name: "Import SChernykh's GPG"
        run: |
          curl -s "$GPG_URL" | gpg --import
        env:
          GPG_URL: "https://github.com/Schernykh.gpg"
      - name: "Verify GPG Signature of Hashes File"
        run: |
          gpg --verify "$HASHES_FILE"
        env:
          HASHES_FILE: "sha256sums.txt.asc"
      - name: "Retrieve P2pool Release Archive"
        run: |
          curl -sLO "https://github.com/SChernykh/p2pool/releases/download/$P2POOL_TAG/p2pool-$P2POOL_TAG-linux-x64.tar.gz"
        env:
          P2POOL_TAG: "${{ steps.p2pool.outputs.release }}"
      - name: "Verify P2pool Release Archive Hash"
        run: |
          grep -iq "$(sha256sum "p2pool-$P2POOL_TAG-linux-x64.tar.gz" | cut -c 1-64)" "sha256sums.txt.asc"
        env:
          P2POOL_TAG: "${{ steps.p2pool.outputs.release }}"
      - name: "Extract P2pool Release Archive"
        run: |
          tar -xzf "p2pool-$P2POOL_TAG-linux-x64.tar.gz"
        env:
          P2POOL_TAG: "${{ steps.p2pool.outputs.release }}"
      - name: "Cache Release Directory"
        id: cache-release
        uses: actions/cache@v2
        with:
          path: |
            p2pool-${{steps.p2pool.outputs.release }}-linux-x64
          key: p2pool@${{ steps.p2pool.outputs.release }}

  lint-p2pool:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: p2pool-container
    steps:
      - uses: actions/checkout@v2
      - name: "Lint Dockerfile"
        id: hadolint
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: p2pool-container/Dockerfile

  build-p2pool:
    needs: ["retrieve-release", "lint-p2pool"]
    runs-on: ubuntu-latest 
    defaults:
      run:
        shell: bash
        working-directory: p2pool-container
    steps:
      - uses: actions/checkout@v2
      - name: "Retrieve Release Directory Cache"
        id: cache-release
        uses: actions/cache@v2
        with:
          path: |
            p2pool-${{ needs.retrieve-release.outputs.p2pool_release }}-linux-x64
          key: p2pool@${{ needs.retrieve-release.outputs.p2pool_release }}
      - name: Get Timestamp
        id: timestampz
        run: echo "::set-output timestampz=$(TZ='UTC' date +'%Y-%m-%dT%H:%M:%SZ')"
      - name: Set Container Metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/mkell43/p2pool
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.p2pool.outputs.release }}
            type=raw,value=${{ steps.timestampz.outputs.timestampz }}
          labels: |
            org.opencontainers.image.created ${{ steps.timestampz.outputs.timestampz }}
            org.opencontainers.image.version ${{ steps.p2pool.outputs.release }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: "Authenticate Docker to Github Package Repository"
        uses: docker/login-action@v1.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CONTAINER_REGISTRY_PAT }}
      - name: "Build & Push Container Image"
        uses: docker/build-push-action@v2.7.0
        with:
          context: ./p2pool-container
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/mkell43/p2pool:buildcache
          cache-to: type=registry,ref=ghcr.io/mkell43/p2pool:buildcache,mode=max
      - name: "Dump Cosign Key To File"
        run: |
          echo "$COSIGN_KEY" > /tmp/cosign.key
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      - name: "Install Cosign"
        uses: sigstore/cosign-installer@v1.2.0
      - name: "Sign The Image"
        run: |
          echo -n "${{ secrets.COSIGN_PASS }}" | \
            cosign sign --key /tmp/cosign.key ghcr.io/mkell43/p2pool:${{ needs.retrieve-release.outputs.p2pool_release }}

  scan-p2pool:
    needs: build-p2pool
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: p2pool-container
    steps:
      - name: Scan Image w/ Trivy
        uses: aquasecurity/trivy-action@0.1.0
        with:
          image-ref: 'ghcr.io/mkell43/p2pool:latest'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
